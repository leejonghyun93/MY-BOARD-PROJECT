<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.board.dao.UserDao">

    <!-- 재사용 가능한 SQL 정의 -->
    <sql id="userColumns">
        userid, passwd, name, age, loginTime, address, detailAddress, fullAddress, phone, email, regDate, updateDate, role, login_fail_count, account_locked
    </sql>

    <!-- 회원 조회 -->
    <select id="getMember" resultType="com.example.board.dto.UserDto">
        SELECT <include refid="userColumns" />
        FROM t_member
        WHERE userid = #{userid}
    </select>

    <!-- 로그인 시간 업데이트 -->
    <update id="setLoginTime" parameterType="String">
        UPDATE t_member SET loginTime = NOW() WHERE userid = #{userid}
    </update>

    <!-- 회원 가입 -->
    <insert id="insert" parameterType="com.example.board.dto.UserDto">
        INSERT INTO t_member (
        <include refid="userColumns" />
        ) VALUES (
        #{userid}, #{passwd}, #{name}, #{age}, NOW(), #{address}, #{detailAddress}, #{fullAddress}, #{phone}, #{email}, NOW(), NOW()
        )
    </insert>

    <!-- 전체 회원 수 조회 -->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM t_member
        <where>
            <if test="searchValue != null and searchValue != ''">
                name LIKE CONCAT('%', #{searchValue}, '%')
            </if>
        </where>
    </select>

    <!-- 페이징된 회원 목록 조회 -->
    <select id="selectPagedMembers" resultType="com.example.board.dto.UserDto">
        SELECT <include refid="userColumns" />
        FROM t_member
        <where>
            <if test="searchValue != null and searchValue != ''">
                name LIKE CONCAT('%', #{searchValue}, '%')
            </if>
        </where>
        ORDER BY userid
        LIMIT #{startRow}, #{pageSize}
    </select>

    <!-- 회원 상세 조회 -->
    <select id="getSelectUserDetail" resultType="com.example.board.dto.UserDto">
        SELECT <include refid="userColumns" />
        FROM t_member
        WHERE userid = #{userid}
    </select>

    <!-- 로그인 실패 횟수 증가 -->
    <update id="increaseLoginFailCount">
        UPDATE t_member
        SET login_fail_count = login_fail_count + 1
        WHERE userid = #{userid}
    </update>

    <!-- 로그인 실패 횟수 초기화 -->
    <update id="resetLoginFailCount">
        UPDATE t_member
        SET login_fail_count = 0
        WHERE userid = #{userid}
    </update>

    <!-- 계정 잠금 -->
    <update id="lockAccount">
        UPDATE t_member
        SET account_locked = 1
        WHERE userid = #{userid}
    </update>

    <!-- 계정 잠금 해제 -->
    <update id="unlockAccount">
        UPDATE t_member
        SET login_fail_count = 0, account_locked = 0
        WHERE userid = #{userid}
    </update>

    <!-- 회원 정보 업데이트 -->
    <update id="updateUser" parameterType="com.example.board.dto.UserDto">
        UPDATE t_member
        SET
            userid = #{userid},
            passwd = #{passwd},
            name = #{name},
            age = #{age},
            address = #{address},
            detailAddress = #{detailAddress},
            fullAddress = #{fullAddress},
            phone = #{phone},
            email = #{email},
            updateDate = NOW(),
            role = #{role}
        WHERE userid = #{userid}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteUser" parameterType="string">
        DELETE FROM t_member WHERE userid = #{userId}
    </delete>

    <!-- 작성자 정보 초기화 -->
    <update id="updateWriterToNull" parameterType="String">
        UPDATE t_board
        SET writer = NULL
        WHERE writer = #{userId}
    </update>

    <!-- 아이디 찾기 (이름과 이메일로) -->
    <select id="findIdByNameAndEmail" resultType="String">
        SELECT userid
        FROM t_member
        WHERE name = #{name} AND email = #{email}
    </select>

    <!-- 사용자 존재 여부 체크 -->
    <select id="checkUser" resultType="int">
        SELECT COUNT(*)
        FROM t_member
        WHERE userid = #{userid}
          AND email = #{email}
    </select>

    <!-- 임시 비밀번호로 업데이트 -->
    <update id="updatePassword">
        UPDATE t_member
        SET passwd = #{passwd}
        WHERE userid = #{userid}
    </update>

    <!-- 로그인 통계 -->
    <select id="getLoginStats" resultType="map">
        SELECT
            DATE_FORMAT(loginTime, '%Y-%m-%d') AS login_day,
            COUNT(*) AS total_logins,
            COUNT(DISTINCT userid) AS unique_users
        FROM t_member
        WHERE loginTime IS NOT NULL
        GROUP BY DATE_FORMAT(loginTime, '%Y-%m-%d')
        ORDER BY login_day
    </select>

    <!-- 네이버 아이디로 회원 조회 -->
    <select id="findByNaverId" parameterType="String" resultType="com.example.board.dto.NaverUserInfo">
        SELECT userid AS naverId, email, name
        FROM t_member
        WHERE userid = #{id}
    </select>

    <!-- 네이버 회원 가입 -->
    <insert id="insertNaverUser" parameterType="com.example.board.dto.NaverUserInfo">
        INSERT INTO t_member (userid, email, name, social_type)
        VALUES (#{naverId}, #{email}, #{name}, 'naver')
    </insert>

</mapper>